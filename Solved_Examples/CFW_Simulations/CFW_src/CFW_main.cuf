!###################################################################################################################################
!
! This saction documents the main code representing each variable and its use:
!  wave1 -  set up wave nos. (k -x1 direction)
!  wave3 -  set up wave nos. (k -x3 direction)
!  tu    -  T in put for calculation of upper halfsapce inplane kernels
!  tuu   -  T in put for calculation of upper halfsapce antiplane kernels
!  td    -  T in put for calculation of lower halfsapce inplane kernels
!  tdd   -  T in put for calculation of lower halfsapce antiplane kernels
! m11u,m11d,m12u,m12d,m22u,m22d -  kernel data
!
!###################################################################################################################################
 ! Read me before running the code
 ! Create folders ./Kernels and ./dats
 ! Before running the code
! main program code begins
PROGRAM CF_main
   USE cufft
   USE Kernel
   USE norms
   IMPLICIT NONE
   
   ! Step 1.1: Decleration of ALLOCATABLE VARIABLES
   REAL*8 , ALLOCATABLE, DIMENSION(:)   :: wave1, wave3, tu,td,tuu,tdd, m11u,m11d,m12u,m12d,m22u,m22d !(wave1 -x1 direction)  (wave3 -x3 direction)
   REAL*8 , ALLOCATABLE, DIMENSION(:,:) :: q,qc,slip,slip1,slip2,slip3,c11u,c11d,c121u,c122u,c121d,c122d,c22u,c22d,c33u,c33d
   REAL*8 , ALLOCATABLE, DIMENSION(:,:) :: mur, mus,slipold,slip1old,slip2old,slip3old,CFW
   REAL*8 , ALLOCATABLE, DIMENSION(:,:) :: Tau1Old,Tau2Old,Tau3Old 
   Real*8,   ALLOCATABLE, DIMENSION(:,:)  :: velo1, velo2,velo3, TT0, TS0, Tn, Tn_err, Tf, taumag, const1,const2, const3
   Complex*16,   ALLOCATABLE, DIMENSION(:,:)   :: conv11, conv13, conv1, conv3, conv31, conv33, tauf1, tauf2,tauf3 ! taulf(x1,x3)
   ! Real *8 , ALLOCATABLE, DIMENSION(:,:)::tauf2r,conv2r
   Complex*16,   ALLOCATABLE, DIMENSION(:,:)   :: conv12, conv21, conv2, conv22, conv32, conv23   !  taulf(x1,x3)
   Complex*16,   ALLOCATABLE, DIMENSION(:,:,:) :: tau1, tau3,tau2   !  tau(x1,x3,t)
   REAL*8 , ALLOCATABLE, DIMENSION (:,:) :: T0bgL_Front  
   
   ! STEP 1.2: Decleration of  ALLOCATABLES OF VARIABLES FOR cuFFT
   Complex*16, DEVICE, ALLOCATABLE :: TAU1F_D(:,:), CONV1_D(:,:)
   Complex*16, DEVICE, ALLOCATABLE :: TAU2F_D(:,:), CONV2_D(:,:)
   Complex*16, DEVICE, ALLOCATABLE :: TAU3F_D(:,:), CONV3_D(:,:)
   complex*16, ALLOCATABLE , DIMENSION(:,:)  :: tauf1trans, tauf2trans,tauf3trans, conv1trans, conv2trans, conv3trans
   INTEGER :: PLAN    
   
   ! Step 1.3: Decleration of variables
   REAL*8 :: gamma, nu, time, betaa, pii, x1,y1
   REAL*8 :: c111u,c111d,c1121u,c1121d,c222u,c222d,c333u,c333d
   INTEGER :: nele,itter,Nitter,TPV_No !, iele, loadpos, xpos, zpos
   INTEGER :: ntime, nele1, nele3, itime, ktime, i, j, k, temp1,n_pts1,n_pts3
   REAL*8 :: b, c, d, e
   REAL*8 :: START_TIME, END_TIME, ELAPSED_TIME, Tend, factor1, factor2
   REAL*8 :: L1,L3,L1rpt,L3rpt,E6,dt,T0bg,Tn0,deltac,dx,T0nu,T0nuL,T0nuR
   REAL*8 :: Cs,csratio,Csm,Cd,Mu,Mum,Muratio,cdratio,Cdm,Ro,Roratio,Rom, css, cssm
   REAL*8 :: eps,L1_barrier,T0bgL,tstr
   REAL*8 :: a_0, a_t,const_a0,mus0,mur0,Asp_Loc,Asp_rad
   INTEGER ::  outinterval1, outinterval2
   INTEGER :: outpos4, outpos3, outpos2, outpos1
   INTEGER :: input
   character (len=90) :: filename
   CHARACTER (len=160) :: word160   

   CALL CPU_TIME(START_TIME)   
   ! Step 1.5: Decleration of parameter
   E6 = 1000000.0d0;
   ! Step 1.4: Read the data input .in file
   OPEN(7008,FILE='./src/Data_Input.in',STATUS='unknown')
      READ(7008,*) word160
      READ(7008,*) TPV_No   ! Enter the TPV problem number being solved (enter only, 3,5,6, and 7). Lets keep 1 for CFW simulations
      READ(7008,*) word160
      READ(7008,*) L1rpt   ! The length of slip-weakening interface size in X1 direction
      READ(7008,*) word160
      READ(7008,*) L3rpt   ! The length of slip-weakening interface size in X3 direction
      READ(7008,*) word160
      READ(7008,*) L1      ! The total length of planer interface in X1 direction. For CFW simulation its equal to L1rpt
      READ(7008,*) word160
      READ(7008,*) L3      ! The total length of planer interface in X3 direction. For CFW simulation its equal to L3rpt
      READ(7008,*) word160
      READ(7008,*) nele    ! (nele1) Total number of elements in X1-direction (Should be the powers of 2)
      NELE1 = NELE 
      READ(7008,*) word160 
      READ(7008,*) nele3   ! Total number of elements in X3-direction (Should be the powers of 2)
      READ(7008,*) word160
      READ(7008,*) Csm     ! The shear wave speed of lower half-space
      READ(7008,*) word160
      READ(7008,*) Cdm     ! Dilation wave speed of lower half-space
      READ(7008,*) word160
      READ(7008,*) Rom     ! The density of lower half-space
      Mum = Csm*Csm*Rom;            ! shear modulus of lower half-space
      cssm = Csm*Csm
      READ(7008,*) word160
      READ(7008,*) nu      ! Poisson's ratio
      READ(7008,*) word160
      READ(7008,*) csratio ! csratio of lower and top half-space
      READ(7008,*) word160
      READ(7008,*) cdratio ! cdratio of lower and top half-space
      READ(7008,*) word160
      READ(7008,*) Roratio ! Roratio of lower and top half-space
      Cs = Csm/csratio;             ! shear wave speed of top half-space
      Cd = Cdm/cdratio;             ! compressive wave speed of top half-space
      Ro = Rom/Roratio;             ! density of top half-space
      Mu = Cs*Cs*Ro;                ! shear modulus of top half-space
      Muratio = Mum/Mu;             ! Ratio of shear modulus
      css = Cs*Cs;
      READ(7008,*) word160
      READ(7008,*) DeltaC  ! Critical slip-weakening distance 
      dx = L1/dble(nele);          ! Spatial discretization parameter
      pii = 4.d0*datan(1.0d0)      
      READ(7008,*) word160
      READ(7008,*) betaa   ! Courant parameter
      READ(7008,*) word160
      READ(7008,*) gamma   ! Non-dimensionalised time step
      factor2 = (1.0d0/(Ro*Cd)+1.0d0/(Rom*Cdm)); ! (c_d/c_s)**2
      factor1 = (Cs/Mu+Csm/Mum)
      dt = betaa*dx/Csm;         ! time step      
      READ(7008,*) word160
      READ(7008,*) Tend    ! Total rupture duration time (in sec) 
      READ(7008,*) word160
      READ(7008,*) mus0    ! Static coefficient of friction
      READ(7008,*) word160
      READ(7008,*) mur0    ! Dynamic coefficient of friction
      READ(7008,*) word160
      READ(7008,*) T0nu    ! Neucliation shear stress at the center in (MPa) for TPV3, TPV5, TPV6, and TPV7. For CFW simulation its 2MPa
      T0nu = T0nu * E6
      READ(7008,*) word160
      READ(7008,*) T0nuL   ! Neucliation shear stress at the left in (MPa) for TPV5. Use T0bg for other TPV's. For CFW simulation its 2MPa
      T0nuL = T0nuL * E6
      READ(7008,*) word160
      READ(7008,*) T0nuR   ! Neucliation shear stress at the right in (MPa) for TPV5. Use T0bg for other TPV's. For CFW simulation its 2MPa
      T0nuR = T0nuR * E6
      READ(7008,*) word160
      READ(7008,*) T0bg    ! Shear stress outside of the nucleation patch (background shear stress) in (MPa). For CFW simulation its 2MPa
      T0bg  = T0bg  * E6
      READ(7008,*) word160
      READ(7008,*) Tn0     ! Initial Normal stress in (MPa). For CFW simulation its -120MPa
      Tn0 = Tn0 * E6
      READ(7008,*) word160 ! Give input as 0 if kernels to be calculated and stored in folder ./Kernels
      READ(7008,*) word160 ! Give input as 1 if kernels are calculated a priori and stored in folder ./Kernels
      READ(7008,*) input   ! Read input for Kernels     
      Nitter = 101
      ntime = ceiling(Tend/dt);
      outinterval1 = ceiling(0.05/dt);  
      outinterval2 = ceiling(0.5d0/dt) !12 !6; ! 
      outpos1=  nint(12000.0d0/dx);  outpos2=  nint(7500.0d0/dx)  ! Position at the interface to compute field quantities
      outpos3=  nint(4500.0d0/dx) 
      outpos4=  nint(1000.0d0/dx) 
   CLOSE(7008)

  ! Step 1.3:  Decleration of initial parameter for loading
   a_0 = 300.d0;
   T0bgL = 1.05d0*mus0*dabs(Tn0) ! background shear stress leftside
   const_a0 = 1.35068044468343d0 ! 1.22035045607106d0
   L1_barrier = 6000.d0
   Asp_Loc = -11500.d0
   Asp_rad = 500.d0
   
!  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Step 1.6: Print input data into a .dat file foir cross-checking 
      open(unit=7009,file="./txts/Input.txt")
      write(7009,*) 'Printing input perameters for the current job:'
      write(7009,*) 'nele:   ', nele
      write(7009,*) 'nele1:   ', nele1
      write(7009,*) 'nele3:   ', nele3  
      write(7009,*) 'L1rpt:   ',L1rpt
      write(7009,*) 'L3rpt:   ',L3rpt
      write(7009,*) 'L1:   ',L1
      write(7009,*) 'L3:   ',L3   
      write(7009,*) 'csratio: ', csratio
      write(7009,*) 'cdratio: ', cdratio
      write(7009,*) 'Roratio: ', Roratio
      write(7009,*) 'Mu:   ', Mu
      write(7009,*) 'Muratio: ', Muratio
      write(7009,*) 'DeltaC:  ', DeltaC
      write(7009,*) 'dx:   ',dx
      write(7009,*) 'betaa:   ', betaa
      write(7009,*) 'gamma:   ', gamma
      write(7009,*) 'Tend: ', Tend
      write(7009,*) 'dt:   ',dt
      write(7009,*) 'ntime:   ',ntime
      write(7009,*) 'mus0  :  ', mus0
      write(7009,*) 'mur0  :   ', mur0
      write(7009,*) 'T0nu  : ', T0nu
      write(7009,*) 'T0nuL  : ', T0nuL
      write(7009,*) 'T0nuR  : ', T0nuR         
      write(7009,*) 'T0bg  : ', T0bg
      write(7009,*) 'T0bgL  : ', T0bgL
      write(7009,*) 'Tn0   : ', Tn0   
      close(7009)      
!  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
       
   OPEN(7006,file='./txts/Rupture_Location.txt')
   close(7006)   
   ! Step 1.7: Create the output data file for the station points
   IF (TPV_No .eq. 1) THEN ! This is a special case of crack fron wave simulation
      do i = 1, 14
         WRITE(filename, '(a,i2.2,a)') './txts/out', i, '.txt'
         open(7000+i, file=trim(filename))
         close(7000+i)
      end do
   ELSEIF (TPV_No .eq. 3) THEN
      do i = 1, 2
         WRITE(filename, '(a,i2.2,a)') './dats/out', i, '.dat'
         open(7000+i, file=trim(filename))
         close(7000+i)
      end do
   ELSEIF (TPV_No .eq. 5) THEN
      do i = 1, 16
         WRITE(filename, '(a,i2.2,a)') './dats/out', i, '.dat'
         open(7000+i, file=trim(filename))
         close(7000+i)
      end do
   ELSEIF ((TPV_No .eq. 6) .OR. (TPV_No .eq. 7)) THEN 
      do i = 1, 5
         WRITE(filename, '(a,i2.2,a)') './dats/out', i, '.dat'
         open(7000+i, file=trim(filename))
         close(7000+i)
      end do   
   ELSE
      WRITE(6,*) 'Input Error'
      STOP
   ENDIF  
 
 

   ! Step 1.6:  Allocate size for the variables
   allocate(conv11(nele1,nele3),conv13(nele1,nele3),conv31(nele1,nele3),conv33(nele1,nele3),wave1(nele1),wave3(nele3))
   allocate(conv12(nele1,nele3),conv21(nele1,nele3),conv32(nele1,nele3),conv23(nele1,nele3),conv22(nele1,nele3),conv2(nele1,nele3))
   allocate(tauf1(nele1,nele3),tauf2(nele1,nele3),tauf3(nele1,nele3),conv1(nele1,nele3),conv3(nele1,nele3),qc(nele1,nele3))
   allocate(slip(nele1,nele3),tau1(nele1,nele3,0:ntime),tau2(nele1,nele3,0:ntime),tau3(nele1,nele3,0:ntime),taumag(nele1,nele3))
   allocate(slip1(nele1,nele3),slip2(nele1,nele3),slip3(nele1,nele3),mur(nele1,nele3),mus(nele1,nele3),TS0(nele1,nele3))
   allocate(slipold(nele1,nele3),slip1old(nele1,nele3),slip2old(nele1,nele3),slip3old(nele1,nele3))
   allocate(q(nele1,nele3),velo1(nele1,nele3),velo3(nele1,nele3),Tf(nele1,nele3),TT0(nele1,nele3),Tn(nele1,nele3),Tn_err(nele1,nele3))
   allocate(Tau1Old(nele1,nele3),Tau2Old(nele1,nele3),Tau3Old(nele1,nele3),velo2(nele1,nele3))
   allocate(c11u(nele1,nele3),c11d(nele1,nele3),c22u(nele1,nele3),c22d(nele1,nele3),c121u(nele1,nele3),c121d(nele1,nele3))
   allocate(c33u(nele1,nele3),c33d(nele1,nele3),c122u(nele1,nele3),c122d(nele1,nele3),const1(nele1,nele3),const3(nele1,nele3))
   allocate(T0bgL_Front(ntime,2),CFW(nele3+1,2))
   ! Step 1.7  Allocate size for the variables FOR cuFFT
   allocate(tauf1trans(nele3,nele1), tauf2trans(nele3,nele1),tauf3trans(nele3,nele1),const2(nele1,nele3))
   allocate(conv1trans(nele3,nele1), conv2trans(nele3,nele1), conv3trans(nele3,nele1))
   ! allocate arrays on the device
   allocate (TAU1F_D(nele3,nele1), CONV1_D(nele3,nele1))
   allocate (TAU1F_D(nele3,nele1), CONV1_D(nele3,nele1))
   allocate (TAU2F_D(nele3,nele1), CONV2_D(nele3,nele1))
   allocate (TAU3F_D(nele3,nele1), CONV3_D(nele3,nele1))
   !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
   ! step 2.1: COMPUTE KERNEL
   n_pts1 = ceiling(dsqrt(2.0d0)*pii*betaa*ntime/(csratio*gamma))
   n_pts3 = ceiling(dsqrt(2.0d0)*pii*betaa*ntime/gamma)
   WRITE(*,*) 'n_pts1', n_pts1, 'n_pts3', n_pts3, 'gamma',gamma
   
   ! Give input as 0 if kernels to be calculated and stored in folder ./Kernels
   ! Give input as 1 if kernels are calculated a priori and stored in folder ./Kernels
   allocate(m11u(0:n_pts1),tu(0:n_pts1),m11d(0:n_pts3),td(0:n_pts3),m22u(0:n_pts1),m22d(0:n_pts3),m12u(0:n_pts1),m12d(0:n_pts3))   
 
   ! This loop calculates or retrives the kernels as per the input value
   write(*,*)'Setting u kernel'
   if (input == 1) then
      write(*,*)'Loading u kernel' 
      open(91,file='./Kernels/Kernel_m11u.dat')
      open(92,file='./Kernels/Kernel_m11d.dat')
      open(93,file='./Kernels/Kernel_m22u.dat')
      open(94,file='./Kernels/Kernel_m22d.dat')
      open(95,file='./Kernels/Kernel_m12u.dat')
      open(96,file='./Kernels/Kernel_m12d.dat')
      read(91,*)(m11u(i),i=1,n_pts1)
      WRITE(*,*) 'm11u read', size(m11u), m11u(1)
      read(92,*)(m11d(i),i=1,n_pts3)
      WRITE(*,*) 'm11d read', size(m11d), m11d(1)
      read(93,*)(m22u(i),i=1,n_pts1)
      WRITE(*,*) 'm22u read', size(m22u), m22u(1)
      read(94,*)(m22d(i),i=1,n_pts3)
      WRITE(*,*) 'm22d read', size(m22d), m22d(1)
      read(95,*)(m12u(i),i=1,n_pts1)
      WRITE(*,*) 'm12u read', size(m12u), m12u(1)
      read(96,*)(m12d(i),i=1,n_pts3)
      WRITE(*,*) 'm12d read', size(m12d), m12d(1)
      close(91)
      close(92)
      close(93)
      close(94)
      close(95)
   close(96)
   elseif (input == 0) then
      CALL kern11(n_pts1,gamma,m11u,tu)
      open(1001,file='./Kernels/Kernel_m11u.dat')
      do i = 1,n_pts1
         write(1001,*) m11u(i)
      enddo
      WRITE(*,*) 'm11u read', size(m11u), m11u(1)
      close(1001)
      CALL kern11(n_pts3,gamma,m11d,td)
      open(2001,file='./Kernels/Kernel_m11d.dat')
      do i = 1,n_pts3
         write(2001,*) m11d(i)
      enddo
      WRITE(*,*) 'm11d read', size(m11d), m11d(1)
      close(2001)
      CALL kern22(n_pts1,gamma,m22u,tu)
      open(1002,file='./Kernels/Kernel_m22u.dat')
      do i = 1,n_pts1
         write(1002,*) m22u(i)
      enddo
      WRITE(*,*) 'm22u read', size(m22u), m22u(1)
      close(1002)
      CALL kern22(n_pts3,gamma,m22d,td)
      open(2002,file='./Kernels/Kernel_m22d.dat')
      do i = 1,n_pts3
         write(2002,*) m22d(i)
      enddo
      WRITE(*,*) 'm22d read', size(m22d), m22d(1)
      close(2002)
      CALL kern12(n_pts1,gamma,m12u,tuu)
      open(1012,file='./Kernels/Kernel_m12u.dat')
      do i = 1,n_pts1
         write(1012,*) m12u(i)
      enddo
      WRITE(*,*) 'm12u read', size(m12u), m12u(1)
      close(1012)
      CALL kern12(n_pts3,gamma,m12d,tdd)
      open(2012,file='./Kernels/Kernel_m12d.dat')
      do i = 1,n_pts3
         write(2012,*) m12d(i)
      enddo
      WRITE(*,*) 'm12d read', size(m12d), m12d(1)
   close(2012)
   else
      write(*,*)'Input Error'
      stop
   endif
   m22u(0) = 0.0d0
   m22d(0) = 0.0d0
   m11u(0) = 0.0d0
   m11d(0) = 0.0d0
   
   ! step 2.1: INITIALIZE DIRECTIONAL WAVES
   wave1 = 2.0d0*(pii/L1)*(/(i,i=0,nele1/2),(j,j=1-nele1/2,-1,1)/) ! set up wave nos. (k -x1 direction)
   wave3 = 2.0d0*(pii/L3)*(/(i,i=0,nele3/2),(j,j=1-nele3/2,-1,1)/) ! set up wave nos. (m -x3 direction)
   ! 2D Wave set up
!$acc kernels
   do i=1,nele1
      do j=1,nele3
         q(i,j) = dsqrt(wave1(i)**2+wave3(j)**2)
         qc(i,j) = q(i,j)
      enddo
   enddo
! !$acc end kernels
   q(1,1) =1.0d0
   ! &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
   
   ! step 3.1a: Set up initial shear loads for TPV 3, 5 ,6, and 7 cases
! !$acc kernels
   ! do i=1,nele1
      ! do j=1,nele3
         ! x1 = (i - nele1 / 2) * dx      
         ! y1 = (j-nele3/2)*dx
         ! if(x1.ge.-1500.0d0 .and. x1.le. 1500.0d0 .and. y1.ge. -9000.0d0 .and. y1.le. -6000.0d0)then
            ! TT0(i,j) = T0nu 
            ! Tn(i,j) = Tn0 
            ! TS0(i,j) = 0.d0 
         ! else
            ! TT0(i,j) = T0bg 
            ! Tn(i,j) = Tn0
            ! TS0(i,j) = 0.d0 
         ! endif
         ! if(x1.ge.-9000.0d0 .and. x1.le. -6000.0d0 .and. y1.ge. -9000.0d0 .and. y1.le. -6000.0d0)then
            ! TT0(i,j) = T0nuL 
            ! Tn(i,j) = Tn0 
            ! TS0(i,j) = 0.d0 
         ! endif         
         ! if(x1.ge.6000.0d0 .and. x1.le. 9000.0d0 .and. y1.ge. -9000.0d0 .and. y1.le. -6000.0d0)then
            ! TT0(i,j) = T0nuR 
            ! Tn(i,j) = Tn0 
            ! TS0(i,j) = 0.d0 
         ! endif         
         ! if(x1.ge.-1500.0d0 .and. x1.le. 1500.0d0 .and. y1.ge. 6000.0d0 .and. y1.le. 9000.0d0)then
            ! TT0(i,j) = T0nu 
            ! Tn(i,j) = Tn0 
            ! TS0(i,j) = 0.d0 
         ! endif
         ! if(x1.ge. -9000.0d0 .and. x1.le. -6000.0d0 .and. y1.ge. 6000.0d0 .and. y1.le. 9000.0d0)then
            ! TT0(i,j) = T0nuL 
            ! Tn(i,j) = Tn0 
            ! TS0(i,j) = 0.d0 
         ! endif
         ! if(x1.ge.6000.0d0 .and. x1.le. 9000.0d0 .and. y1.ge. 6000.0d0 .and. y1.le. 9000.0d0)then
            ! TT0(i,j) = T0nuR 
            ! Tn(i,j) = Tn0 
            ! TS0(i,j) = 0.d0 
         ! endif          
      ! enddo
   ! enddo
! !$acc end kernels 

   do i=1,nele1      
      do j=1,nele3
         x1 = (i - nele1 / 2) * dx
         y1 = (j-nele3/2)*dx
         if (y1 .ge. -L3rpt/2.0d0 .and. y1.le. L3rpt/2.0d0 .and. x1 .ge. -L1rpt/2.0d0 .and. x1.le. CF_LocOld) then
            TT0(i,j) = T0bgL !/sqrt(2.d0) ! value can be changed based on required combinations of shear loading on the fault plane
            Tn(i,j) = Tn0 
            TS0(i,j) = 0.d0 !T0bgL/sqrt(2.d0) ! value can be changed based on required combinations of shear loading on the fault plane
         else
            TT0(i,j) = T0bg !/sqrt(2.d0) ! value can be changed based on required combinations of shear loading on the fault plane   
            Tn(i,j) = Tn0 
            TS0(i,j) = 0.d0 !T0bg/sqrt(2.d0) ! value can be changed based on required combinations of shear loading on the fault plane   
         endif
      enddo
   enddo   
   
   ! Step 3.1b: Set up friction coefficient distrubution.
! !$acc kernels
   do i=1,nele
      do j=1,nele3
         x1 = (i-nele1/2)*dx      
         y1 = (j-nele3/2)*dx
         if ( abs(sqrt( (x1 - Asp_Loc) * (x1 - Asp_Loc) + y1*y1) ) .le. Asp_rad) then
            mus(i,j) = 1.1d0 * mus0 
            mur(i,j) = 0.7d0 * mus0  !mur0
         else
            mus(i,j) = mus0
            mur(i,j) = mur0
         endif
      enddo
   enddo 
! !$acc end kernels
   ! Step 3.2: Set the initial conditions of the solution for 0th increment.
   time = 0.d0
   itime = 0  
! !$acc kernels 
   do i = 1,nele1
      do j = 1,nele3
         tau1(i,j,0) = cmplx(TT0(i,j),0.d0)     ! traction component along x1
         tau2(i,j,0) = cmplx(Tn0,0.d0)          ! traction component along x2
         tau3(i,j,0) = cmplx(TS0(i,j),0.d0)     ! traction component along x3
         taumag(i,j) = 0.0d0        ! total shear stress at the interface
         velo1(i,j)  = 0.0d0        ! slip rate along x1
         velo2(i,j)  = 0.0d0        ! slip rate along x3
         velo3(i,j)  = 0.0d0        ! slip rate along x3
         slip(i,j)   = 0.0d0        ! total slip rate at the interface
         slip1(i,j)   = 0.0d0       ! Slip along x1
         slip2(i,j)   = 0.0d0       ! Slip along x1
         slip3(i,j)   = 0.0d0       ! Slip along x3
         slipold(i,j)   = 0.0d0        ! total slip rate at the interface
         slip1old(i,j)   = 0.0d0       ! Slip along x1
         slip2old(i,j)   = 0.0d0       ! Slip along x1
         slip3old(i,j)   = 0.0d0       ! Slip along x3
      enddo
   enddo
   
   do j = 1,nele3+1
      CFW(j,1) = -L1rpt/2.d0 + a_0
      CFW(j,2) = ((j-1) - nele3 / 2) * dx
   enddo
!$acc end kernels  

   ! Step 3.2: Read Crack front output file from line crak simulation for loading input location.
   open(1,file="./dats/SlipFrontOut.dat")
   do i= 1,ntime+1
        read(1,33)(T0bgL_Front(j),i=1,2)
   do end        
   close(1) 
    
   
  ! Step 3.2: Crack front output file declration with the initial conditions of the problem.
   WRITE(filename,'(a,i4.4,a)') "SlipFrontOutNew",(itime),".txt"    
   DO i=1,nele3+1
      open(unit=1,file=filename,Access = 'append',Status='unknown')
         write(1,33) CFW(i,1),CFW(i,2)
      close(1)    
   enddo
   
   ! &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
   !        The time loop starts now
   ! &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
   
   ! Step 4: Time loop start
   write(*,*)'Time loop start for:', ntime, 'increments.'
   do itime = 1, ntime
      time = itime*dt
!$acc kernels      

      ! Step 4.1: Get loading boundary in current increment from the previous simulation with no asperity
      a_t = L1rpt/2.0d0 + T0bgL_Front(itime,2)
      
      
      do i = 1,nele1
         do  j=1,nele3
            Tau1Old(i,j) = tau1(i,j,itime-1)
            Tau2Old(i,j) = tau2(i,j,itime-1)
            Tau3Old(i,j) = tau3(i,j,itime-1)
         end do
      end do
      
! Step 4.1: compute current slip      
      ! !$acc kernels  
      do i=1,nele1
         do j=1,nele3
            slip1(i,j) = slip1old(i,j) + velo1(i,j)*dt
            slip3(i,j) = slip3old(i,j) + velo3(i,j)*dt
            slip(i,j) = dsqrt(slip1(i,j)**2 + slip3(i,j)**2)
         enddo
      enddo
! !$acc end kernels

   do i=1,nele1      
      do j=1,nele3
         x1 = (i - nele1 / 2) * dx
         y1 = (j-nele3/2)*dx
         if (y1 .ge. -L3rpt/2.0d0 .and. y1.le. L3rpt/2.0d0 .and. x1 .ge. -L1rpt/2.0d0 .and. x1.le. T0bgL_Front(itime,2)) then
            Tstr = mus0 * dabs(Tn0)
            T0bgL = const_a0 * sqrt(2.d0 * Mu * Tstr * DeltaC /(pii * a_t* (1.d0 - nu)))
            TT0(i,j) = T0bgL !/sqrt(2.d0) ! value can be changed based on required combinations of shear loading on the fault plane
            Tn(i,j) = Tau2Old(i,j)
            TS0(i,j) = 0.d0 !T0bgL/sqrt(2.d0) ! value can be changed based on required combinations of shear loading on the fault plane
         else
            TT0(i,j) = T0bg !/sqrt(2.d0) ! value can be changed based on required combinations of shear loading on the fault plane  
            Tn(i,j) = real(Tau2Old(i,j))
            TS0(i,j) = 0.d0 !T0bg/sqrt(2.d0) ! value can be changed based on required combinations of shear loading on the fault plane   
         endif
      enddo
   enddo   
   
!$acc end kernels

      ! &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
      ! The convergence loop for Tn starts now
      ! &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
      ! Step 4.3: The convergence loop for Tn
      do itter = 1,Nitter
!$acc kernels      
         do i=1,nele
            do j=1,nele3
               tauf1(i,j) = Tau1Old(i,j)  - cmplx(TT0(i,j),0.d0)   ! tauf1(x1,x3)=tau1(x1,x3,t-dt)-tau10
               tauf2(i,j) = Tau2Old(i,j)  - cmplx(Tn(i,j),0.d0) !    ! tauf2(x1,x3)=tau2(x1,x3,t-dt)-tau20
               tauf3(i,j) = Tau3Old(i,j)  - cmplx(TS0(i,j),0.d0)   ! tauf3(x1,x3)=tau3(x1,x3,t-dt)-tau30
            enddo
         enddo
!$acc end kernels
         !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
         ! Use FFT to evaluate all traction amplitude at current time, tau1(k,t),tau2(k,t),tau3(k,t)
         !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

         ! Step 4.3a: Operations for CuFFT
      !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
      ! Initialize the plan
         call cufftPlan2D(plan,nele1,nele3,CUFFT_Z2Z,1)
      !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%         
         !copy arrays to device
         TAU1F_D=transpose(tauf1)
         TAU2F_D=transpose(tauf2)
         TAU3F_D=transpose(tauf3)

         ! ! Execute FFTs
         call cufftExecZ2Z(plan,TAU1F_D,TAU1F_D,CUFFT_FORWARD)
         call cufftExecZ2Z(plan,TAU2F_D,TAU2F_D,CUFFT_FORWARD)
         call cufftExecZ2Z(plan,TAU3F_D,TAU3F_D,CUFFT_FORWARD)

         ! Copy results back to host
         tauf1trans= (TAU1F_D)
         tauf2trans= (TAU2F_D)
         tauf3trans= (TAU3F_D)
         tauf1= (transpose(tauf1trans))
         tauf2= (transpose(tauf2trans))
         tauf3= (transpose(tauf3trans))
         !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!$acc kernels            
         do i=1,nele1
            do j=1,nele3
               tau1(i,j,itime-1) = tauf1(i,j)       !  tau1(k,m,t) = tauf1(k,m)
               tau2(i,j,itime-1) = tauf2(i,j)       !  tau2(k,m,t) = tauf2(k,m)
               tau3(i,j,itime-1) = tauf3(i,j)       !  tau3(k,m,t) = tauf3(k,m)
            enddo
         enddo
! !$acc end kernels
! The OpenACC is utilized to execute the loop, enabling it to operate concurrently on multiple cores in GPU. 
! !$acc kernels              
! !$acc kernels loop gang worker vector collapse(2)
            do i=1,nele1
               do j=1,nele3
                  c11u(i,j)   = (css/Mu)*m11u(nint(dabs(qc(i,j))*time*Cs/gamma))
                  c11d(i,j)   = (cssm/Mum)*m11d(nint(dabs(qc(i,j))*time*Csm/gamma))
                  c121u(i,j)  = (css/Mu)*m12u(nint(dabs(qc(i,j))*time*Cs/gamma))
                  c122u(i,j)  = (css/Mu)*m12u(0)
                  c121d(i,j)  = (cssm/Mum)*m12d(nint(dabs(qc(i,j))*time*Csm/gamma))
                  c122d(i,j)  = (cssm/Mum)*m12d(0)
                  c22u(i,j)   = (css/Mu)*m22u(nint(dabs(qc(i,j))*time*Cs/gamma))
                  c22d(i,j)   = (cssm/Mum)*m22d(nint(dabs(qc(i,j))*time*Csm/gamma))
                  c33u(i,j)   = (css/Mu)*bessel_j1(dabs(qc(i,j))*time*Cs)
                  c33d(i,j)   = (cssm/Mum)*bessel_j1(dabs(qc(i,j))*time*Csm)

                  conv11(i,j) = 0.5d0*(wave1(i)**2*(c11u(i,j)+c11d(i,j))+wave3(j)**2*(c33u(i,j)+c33d(i,j)))*tau1(i,j,0)*dt/dabs(q(i,j))
                  conv12(i,j) = 0.5d0*((c121u(i,j)-c121d(i,j))*tau2(i,j,0)+(c122u(i,j)-c122d(i,j))*tau2(i,j,itime-1))*wave1(i)*cmplx(0.0d0,1.0d0)*dt
                  conv13(i,j) = 0.5d0*((c11u(i,j)+c11d(i,j))-(c33u(i,j)+c33d(i,j)))*wave1(i)*wave3(j)*tau3(i,j,0)*dt/dabs(q(i,j))

                  conv21(i,j) = 0.5d0*((c121u(i,j)-c121d(i,j))*tau1(i,j,0)+(c122u(i,j)-c122d(i,j))*tau1(i,j,itime-1))*wave1(i)*cmplx(0.0d0,-1.0d0)*dt
                  conv22(i,j) = 0.5d0*(c22u(i,j)+c22d(i,j))*tau2(i,j,0)*dabs(qc(i,j))*dt
                  conv23(i,j) = 0.5d0*((c121u(i,j)-c121d(i,j))*tau3(i,j,0)+(c122u(i,j)-c122d(i,j))*tau3(i,j,itime-1))*wave3(j)*cmplx(0.0d0,-1.0d0)*dt

                  conv31(i,j) = 0.5d0*((c11u(i,j)+c11d(i,j))-(c33u(i,j)+c33d(i,j)))*wave1(i)*wave3(j)*tau1(i,j,0)*dt/dabs(q(i,j))
                  conv32(i,j) = 0.5d0*((c121u(i,j)-c121d(i,j))*tau2(i,j,0)+(c122u(i,j)-c122d(i,j))*tau2(i,j,itime-1))*wave3(j)*cmplx(0.0d0,1.0d0)*dt
                  conv33(i,j) = 0.5d0*(wave3(j)**2*(c11u(i,j)+c11d(i,j))+wave1(i)**2*(c33u(i,j)+c33d(i,j)))*tau3(i,j,0)*dt/dabs(q(i,j))
                  ! !$acc kernels         
                  do ktime = 1,itime-1
                     c111u   = (css/Mu)*m11u(nint(dabs(qc(i,j))*(itime-ktime)*dt*Cs/gamma))
                     c111d   = (cssm/Mum)*m11d(nint(dabs(qc(i,j))*(itime-ktime)*dt*Csm/gamma))
                     c1121u  = (css/Mu)*m12u(nint(dabs(qc(i,j))*(itime-ktime)*dt*Cs/gamma))
                     c1121d  = (cssm/Mum)*m12d(nint(dabs(qc(i,j))*(itime-ktime)*dt*Csm/gamma))
                     c222u   = (css/Mu)*m22u(nint(dabs(qc(i,j))*(itime-ktime)*dt*Cs/gamma))
                     c222d   = (cssm/Mum)*m22d(nint(dabs(qc(i,j))*(itime-ktime)*dt*Csm/gamma))
                     c333u   = (css/Mu)*bessel_j1(dabs(qc(i,j))*(itime-ktime)*dt*Cs)
                     c333d   = (cssm/Mum)*bessel_j1(dabs(qc(i,j))*(itime-ktime)*dt*Csm)

                     conv11(i,j) = conv11(i,j) + (wave1(i)**2*(c111u+c111d)+wave3(j)**2*(c333u+c333d))*tau1(i,j,ktime)*dt/dabs(q(i,j))
                     conv12(i,j) = conv12(i,j) + (c1121u-c1121d)*tau2(i,j,ktime)*wave1(i)*cmplx(0.0d0,1.0d0)*dt
                     conv13(i,j) = conv13(i,j) + ((c111u+c111d)-(c333u+c333d))*wave1(i)*wave3(j)*tau3(i,j,ktime)*dt/dabs(q(i,j))

                     conv21(i,j) = conv21(i,j) + (c1121u-c1121d)*tau1(i,j,ktime)*wave1(i)*cmplx(0.0d0,-1.0d0)*dt
                     conv22(i,j) = conv22(i,j) + (c222u+c222d)*tau2(i,j,ktime)*dabs(qc(i,j))*dt
                     conv23(i,j) = conv23(i,j) + (c1121u-c1121d)*tau3(i,j,ktime)*wave3(j)*cmplx(0.0d0,-1.0d0)*dt

                     conv31(i,j) = conv31(i,j) + ((c111u+c111d)-(c333u+c333d))*wave1(i)*wave3(j)*tau1(i,j,ktime)*dt/dabs(q(i,j))
                     conv32(i,j) = conv32(i,j) + (c1121u-c1121d)*tau2(i,j,ktime)*wave3(j)*cmplx(0.0d0,1.0d0)*dt
                     conv33(i,j) = conv33(i,j) + (wave3(j)**2*(c111u+c111d)+wave1(i)**2*(c333u+c333d))*tau3(i,j,ktime)*dt/dabs(q(i,j))
                  enddo
                  ! !$acc end kernels
               conv1(i,j) = (conv11(i,j)+conv12(i,j)+conv13(i,j))/factor1
               conv2(i,j) = (conv21(i,j)+conv22(i,j)+conv23(i,j))/factor2
               conv3(i,j) = (conv31(i,j)+conv32(i,j)+conv33(i,j))/factor1
               enddo
            enddo
!$acc end kernels
         !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
         ! Step 11: Use Inverse FFT to comute convolution term, f(x,t), at current time
         !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
         ! !copy arrays to device
         CONV1_D=transpose(conv1)
         CONV2_D=transpose(conv2)
         CONV3_D=transpose(conv3)
         ! Execute IFFTs
         call cufftExecZ2Z(plan,CONV1_D,CONV1_D,CUFFT_INVERSE)
         call cufftExecZ2Z(plan,CONV2_D,CONV2_D,CUFFT_INVERSE)
         call cufftExecZ2Z(plan,CONV3_D,CONV3_D,CUFFT_INVERSE)
         ! ! Copy results back to host
         conv1trans= (CONV1_D)
         conv2trans= (CONV2_D)
         conv3trans= (CONV3_D)
         conv1= transpose(conv1trans)
         conv2= transpose(conv2trans)
         conv3= transpose(conv3trans)
         conv1 = conv1/(nele1*nele3)
         conv2 = conv2/(nele1*nele3)
         conv3 = conv3/(nele1*nele3)
         !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! !$acc end kernels                      

!$acc kernels  
         ! Step 4.3d: Introduce friction law and setup      
         do i = 1,nele1
            do j=1,nele3
               x1=(i-nele1/2)*dx
               y1=(j-nele3/2)*dx
               if(slip(i,j).lt.DeltaC)then
               Tf(i,j) = (mus(i,j)-(mus(i,j)-mur(i,j))*slip(i,j)/DeltaC)*dabs(real(conv2(i,j))+Tn(i,j)) !dabs(Tn0)!
               else
                  Tf(i,j) = mur(i,j)*dabs(real(conv2(i,j))+Tn(i,j))
               endif
               if (x1 .lt. -L1rpt/2.0d0 .or. x1 .gt. L1rpt/2.0d0 - L1_barrier .or. y1 .lt. -L3rpt/2.0d0 .or. y1.gt. L3rpt/2.0d0) then
                  Tf(i,j) = 10000.0d0*dabs(Tn0)
               endif
            enddo 
         enddo
! !$acc end kernels     
         ! Step 4.3e: Using friction law and BIEM equation, update velocity, slip and stress distribution at current time
! !$acc kernels          
         do i = 1,nele1
            do j=1,nele3
               const1(i,j) = TT0(i,j)+real(conv1(i,j))
               const2(i,j) = real(conv2(i,j)) + Tn(i,j)
               const3(i,j) = real(conv3(i,j)) + TS0(i,j)
               taumag(i,j) = dsqrt(const1(i,j)**2+const3(i,j)**2)
               if (Tf(i,j) .gt. taumag(i,j)) then
                  velo1(i,j) = 0.0d0
                  velo3(i,j) = 0.0d0
                  tau1(i,j,itime) = const1(i,j)
                  tau2(i,j,itime) = const2(i,j)
                  tau3(i,j,itime) = const3(i,j)
               else
                  tau1(i,j,itime) = Tf(i,j) * const1(i,j)/taumag(i,j)
                  tau3(i,j,itime) = Tf(i,j) * const3(i,j)/taumag(i,j)
                  tau2(i,j,itime) = const2(i,j) 
                  velo1(i,j) = const1(i,j)*(1.0d0-Tf(i,j)/taumag(i,j))*factor1
                  velo3(i,j) = const3(i,j)*(1.0d0-Tf(i,j)/taumag(i,j))*factor1
               endif
            enddo
         enddo
! !$acc end kernels       


         !Step 4.3f: Tn convergence check
! !$acc kernels         
         do i = 1,nele1
            do j = 1,nele3
               Tn_err(i,j) = real(tau2(i,j,itime)) - Tau2Old(i,j)
               Tau1Old(i,j) = tau1(i,j,itime)
               Tau2Old(i,j) = tau2(i,j,itime)
               Tau3Old(i,j) = tau3(i,j,itime)
            end do
         end do
!$acc end kernels      
          
         ! Check for Tn convergence
         call norm2(eps,Tn_err,nele1,nele3)
         IF (eps .le. 0.01*dabs(Tn0)) THEN
            exit 
         else
            CYCLE  
         END IF         
         IF (itter == Nitter-1) THEN
            exit
         endif
          
          
      end do ! end of itteration loop for Tn convergence
      
               
      !Step 4.4:Destroy the plan 
      call cufftDestroy(plan)
      
 !$acc kernels 
      do i=1,nele1
         do j=1,nele3
            slip1old(i,j) = slip1(i,j)
            slip3old(i,j) = slip3(i,j)
         enddo
      enddo
   ! Get the updated location of crack front
   i=0
   j=0
   do j=1,nele3
      do i=1,nele1
         y1 = (j - nele3 / 2) * dx
         x1 = (i - nele1 / 2) * dx
            if (x1 .ge. -L1rpt/2.0d0 + a_0 .and. x1.le.L1rpt/2.0d0 - L1_barrier) then  
               if (slip(i,j) .gt. 0.00000001d0) then
                  CFW(j,1) = (i - nele1 / 2) * dx !maxval(slipold) 
                  CFW(j,2) = (j - nele3 / 2) * dx             
               ENDif 
            ENDif 
      enddo
   enddo
!$acc end kernels
    
      
      ! Step 14: Writing the results to file
   if (mod(itime,outinterval2) == 0) then
        write(*,*)'Time step ', time,'itime',itime
        WRITE(filename,'(a,i4.4,a)') "./txts/Out",(itime/outinterval2),".txt"       
        OPEN(unit=itime,file=filename)
         do i = 1,nele1
            x1=(i-nele1/2)*dx
            do j=1,nele3
               y1=(j-nele3/2)*dx
               if(slip(i,j) .lt. 0.2d0 .and. slip(i,j) .gt. 0.0001d0)then
                  write(itime,30)time,x1/1000.0d0,y1/1000.0d0,slip(i,j),slip1(i,j),slip3(i,j),velo1(i,j),velo3(i,j)
30                format(8(8x,e14.7))
               endif
            enddo
        enddo
        close (itime)  
    endif
          


   ! if (mod(itime,outinterval2) == 0) then
   if (mod(itime,itime) == 0) then
      do i=1,nele1
         do j=nele3/2-1,nele3/2+1
         x1 = (i - nele1 / 2) * dx
            y1 = (j-nele3/2)*dx
            if (x1 .ge. (-L1rpt/2.0d0  + a_0) .and. x1.le. L1rpt/2.0d0 - L1_barrier ) then 
               if (y1 .eq. 0.d0) then
                  if (slip1(i,j) .lt. 0.0005d0 .and. slip1(i,j) .gt. 0.00000001d0) then
                     OPEN(7006,file='./txts/Rupture_Location.txt',Access = 'append',Status='old')            
                     write(7006,32) itime*1.d0,time,x1,y1,slip1(i,j),(Slip1LocNew-(-L1rpt/2.0d0  + a_0))/time, &
                     (Slip1LocNew-(-L1rpt/2.0d0 + a_0))/time/Cs,T0bgL
                     32    format(8(8x,e14.7))
                     close(7006)
                  end if         
               end if
            end if
         end do
      end do
   end if
   

   ! if (float(itime/outinterval1) == float(itime)/float(outinterval1)) then
   if (mod(itime,itime) == 0) then
      IF (TPV_No .eq. 1) THEN
            OPEN(7001, file='./dats/out14.dat',Access = 'append',Status='old')     
               write(7001,31)time,&
               slip1(nele1/2-outpos4,nele3/2),velo1(nele1/2-outpos4,nele3/2),real(tau1(nele1/2-outpos4,nele3/2,itime))/E6,&
               slip3(nele1/2-outpos4,nele3/2),velo3(nele1/2-outpos4,nele3/2),real(tau3(nele1/2-outpos4,nele3/2,itime))/E6,&
               slip2(nele1/2-outpos4,nele3/2),velo2(nele1/2-outpos4,nele3/2),real(tau2(nele1/2-outpos4,nele3/2,itime))/E6
               close(7001)
               OPEN(7002, file='./dats/out13.dat',Access = 'append',Status='old')  
               write(7002,31)time,&
               slip1(nele1/2-outpos4*2,nele3/2),velo1(nele1/2-outpos4*2,nele3/2),real(tau1(nele1/2-outpos4*2,nele3/2,itime))/E6,&
               slip3(nele1/2-outpos4*2,nele3/2),velo3(nele1/2-outpos4*2,nele3/2),real(tau3(nele1/2-outpos4*2,nele3/2,itime))/E6,&
               slip2(nele1/2-outpos4*2,nele3/2),velo2(nele1/2-outpos4*2,nele3/2),real(tau2(nele1/2-outpos4*2,nele3/2,itime))/E6
               close(7002)
               OPEN(7003, file='./dats/out12.dat',Access = 'append',Status='old')     
               write(7003,31)time,&
               slip1(nele1/2-outpos4*3,nele3/2),velo1(nele1/2-outpos4*3,nele3/2),real(tau1(nele1/2-outpos4*3,nele3/2,itime))/E6,&
               slip3(nele1/2-outpos4*3,nele3/2),velo3(nele1/2-outpos4*3,nele3/2),real(tau3(nele1/2-outpos4*3,nele3/2,itime))/E6,&
               slip2(nele1/2-outpos4*3,nele3/2),velo2(nele1/2-outpos4*3,nele3/2),real(tau2(nele1/2-outpos4*3,nele3/2,itime))/E6
               close(7003)             
               OPEN(7004, file='./dats/out11.dat',Access = 'append',Status='old')  
               write(7004,31)time,&
               slip1(nele1/2-outpos4*4,nele3/2),velo1(nele1/2-outpos4*4,nele3/2),real(tau1(nele1/2-outpos4*4,nele3/2,itime))/E6,&
               slip3(nele1/2-outpos4*4,nele3/2),velo3(nele1/2-outpos4*4,nele3/2),real(tau3(nele1/2-outpos4*4,nele3/2,itime))/E6,&
               slip2(nele1/2-outpos4*4,nele3/2),velo2(nele1/2-outpos4*4,nele3/2),real(tau2(nele1/2-outpos4*4,nele3/2,itime))/E6
               close(7004)
               OPEN(7005, file='./dats/out10.dat',Access = 'append',Status='old')     
               write(7005,31)time,&
               slip1(nele1/2-outpos4*5,nele3/2),velo1(nele1/2-outpos4*5,nele3/2),real(tau1(nele1/2-outpos4*5,nele3/2,itime))/E6,&
               slip3(nele1/2-outpos4*5,nele3/2),velo3(nele1/2-outpos4*5,nele3/2),real(tau3(nele1/2-outpos4*5,nele3/2,itime))/E6,&
               slip2(nele1/2-outpos4*5,nele3/2),velo2(nele1/2-outpos4*5,nele3/2),real(tau2(nele1/2-outpos4*5,nele3/2,itime))/E6
               close(7005)             
               OPEN(7006, file='./dats/out09.dat',Access = 'append',Status='old')  
               write(7006,31)time,&
               slip1(nele1/2-outpos4*6,nele3/2),velo1(nele1/2-outpos4*6,nele3/2),real(tau1(nele1/2-outpos4*6,nele3/2,itime))/E6,&
               slip3(nele1/2-outpos4*6,nele3/2),velo3(nele1/2-outpos4*6,nele3/2),real(tau3(nele1/2-outpos4*6,nele3/2,itime))/E6,&
               slip2(nele1/2-outpos4*6,nele3/2),velo2(nele1/2-outpos4*6,nele3/2),real(tau2(nele1/2-outpos4*6,nele3/2,itime))/E6
               close(7006)
               OPEN(7007, file='./dats/out08.dat',Access = 'append',Status='old')     
               write(7007,31)time,&
               slip1(nele1/2-outpos4*7,nele3/2),velo1(nele1/2-outpos4*7,nele3/2),real(tau1(nele1/2-outpos4*7,nele3/2,itime))/E6,&
               slip3(nele1/2-outpos4*7,nele3/2),velo3(nele1/2-outpos4*7,nele3/2),real(tau3(nele1/2-outpos4*7,nele3/2,itime))/E6,&
               slip2(nele1/2-outpos4*7,nele3/2),velo2(nele1/2-outpos4*7,nele3/2),real(tau2(nele1/2-outpos4*7,nele3/2,itime))/E6
               close(7007)             
               OPEN(7008, file='./dats/out07.dat',Access = 'append',Status='old')  
               write(7008,31)time,&
               slip1(nele1/2-outpos4*8,nele3/2),velo1(nele1/2-outpos4*8,nele3/2),real(tau1(nele1/2-outpos4*8,nele3/2,itime))/E6,&
               slip3(nele1/2-outpos4*8,nele3/2),velo3(nele1/2-outpos4*8,nele3/2),real(tau3(nele1/2-outpos4*8,nele3/2,itime))/E6,&
               slip2(nele1/2-outpos4*8,nele3/2),velo2(nele1/2-outpos4*8,nele3/2),real(tau2(nele1/2-outpos4*8,nele3/2,itime))/E6
               close(7008)
               OPEN(7009, file='./dats/out06.dat',Access = 'append',Status='old')  
               write(7009,31)time,&
               slip1(nele1/2-outpos4*9,nele3/2),velo1(nele1/2-outpos4*9,nele3/2),real(tau1(nele1/2-outpos4*9,nele3/2,itime))/E6,&
               slip3(nele1/2-outpos4*9,nele3/2),velo3(nele1/2-outpos4*9,nele3/2),real(tau3(nele1/2-outpos4*9,nele3/2,itime))/E6,&
               slip2(nele1/2-outpos4*9,nele3/2),velo2(nele1/2-outpos4*9,nele3/2),real(tau2(nele1/2-outpos4*9,nele3/2,itime))/E6
               close(7009)
               OPEN(7010, file='./dats/out05.dat',Access = 'append',Status='old')  
               write(7010,31)time,&
               slip1(nele1/2-outpos4*10,nele3/2),velo1(nele1/2-outpos4*10,nele3/2),real(tau1(nele1/2-outpos4*10,nele3/2,itime))/E6,&
               slip3(nele1/2-outpos4*10,nele3/2),velo3(nele1/2-outpos4*10,nele3/2),real(tau3(nele1/2-outpos4*10,nele3/2,itime))/E6,&
               slip2(nele1/2-outpos4*10,nele3/2),velo2(nele1/2-outpos4*10,nele3/2),real(tau2(nele1/2-outpos4*10,nele3/2,itime))/E6
               close(7010)       
               OPEN(7011, file='./dats/out04.dat',Access = 'append',Status='old')  
               write(7011,31)time,&
               slip1(nele1/2-outpos4*11,nele3/2),velo1(nele1/2-outpos4*11,nele3/2),real(tau1(nele1/2-outpos4*11,nele3/2,itime))/E6,&
               slip3(nele1/2-outpos4*11,nele3/2),velo3(nele1/2-outpos4*11,nele3/2),real(tau3(nele1/2-outpos4*11,nele3/2,itime))/E6,&
               slip2(nele1/2-outpos4*11,nele3/2),velo2(nele1/2-outpos4*11,nele3/2),real(tau2(nele1/2-outpos4*11,nele3/2,itime))/E6
               close(7011)       
               OPEN(7012, file='./dats/out03.dat',Access = 'append',Status='old')  
               write(7012,31)time,&
               slip1(nele1/2-outpos4*12,nele3/2),velo1(nele1/2-outpos4*12,nele3/2),real(tau1(nele1/2-outpos4*12,nele3/2,itime))/E6,&
               slip3(nele1/2-outpos4*12,nele3/2),velo3(nele1/2-outpos4*12,nele3/2),real(tau3(nele1/2-outpos4*12,nele3/2,itime))/E6,&
               slip2(nele1/2-outpos4*12,nele3/2),velo2(nele1/2-outpos4*12,nele3/2),real(tau2(nele1/2-outpos4*12,nele3/2,itime))/E6
               close(7012)       
               OPEN(7013, file='./dats/out02.dat',Access = 'append',Status='old')  
               write(7013,31)time,&
               slip1(nele1/2-outpos4*13,nele3/2),velo1(nele1/2-outpos4*13,nele3/2),real(tau1(nele1/2-outpos4*13,nele3/2,itime))/E6,&
               slip3(nele1/2-outpos4*13,nele3/2),velo3(nele1/2-outpos4*13,nele3/2),real(tau3(nele1/2-outpos4*13,nele3/2,itime))/E6,&
               slip2(nele1/2-outpos4*13,nele3/2),velo2(nele1/2-outpos4*13,nele3/2),real(tau2(nele1/2-outpos4*13,nele3/2,itime))/E6
               close(7013)       
               OPEN(7014, file='./dats/out01.dat',Access = 'append',Status='old')  
               write(7014,31)time,&
               slip1(nele1/2-outpos4*14,nele3/2),velo1(nele1/2-outpos4*14,nele3/2),real(tau1(nele1/2-outpos4*14,nele3/2,itime))/E6,&
               slip3(nele1/2-outpos4*14,nele3/2),velo3(nele1/2-outpos4*14,nele3/2),real(tau3(nele1/2-outpos4*14,nele3/2,itime))/E6,&
               slip2(nele1/2-outpos4*14,nele3/2),velo2(nele1/2-outpos4*14,nele3/2),real(tau2(nele1/2-outpos4*14,nele3/2,itime))/E6
               close(7014) 
      ELSEIF (TPV_No .eq. 3) THEN
            OPEN(7001, file='./dats/out01.dat',Access = 'append',Status='old')  
            write(7001,31)time,&
            slip1(nele1/2,nele3/2+nint(outpos1/4.d0)),velo1(nele1/2,nele3/2+nint(outpos1/4.d0)), & 
            real(tau1(nele1/2,nele3/2+nint(outpos1/4.d0),itime))/E6,&
            slip3(nele1/2,nele3/2+nint(outpos1/4.d0)),velo3(nele1/2,nele3/2+nint(outpos1/4.d0)), & 
            real(tau3(nele1/2,nele3/2+nint(outpos1/4.d0),itime))/E6,&
            slip2(nele1/2,nele3/2+nint(outpos1/4.d0)),velo2(nele1/2,nele3/2+nint(outpos1/4.d0)), &
            real(tau2(nele1/2,nele3/2+nint(outpos1/4.d0),itime))/E6
            close(7001)
            OPEN(7002, file='./dats/out02.dat',Access = 'append',Status='old')     
            write(7002,31)time,&
            slip1(nele1/2+outpos2,nele3/2),velo1(nele1/2+outpos2,nele3/2),real(tau1(nele1/2+outpos2,nele3/2,itime))/E6,&
            slip3(nele1/2+outpos2,nele3/2),velo3(nele1/2+outpos2,nele3/2),real(tau3(nele1/2+outpos2,nele3/2,itime))/E6,&
            slip2(nele1/2+outpos2,nele3/2),velo2(nele1/2+outpos2,nele3/2),real(tau2(nele1/2+outpos2,nele3/2,itime))/E6
            close(7002)
      ELSEIF (TPV_No .eq. 5) THEN
               OPEN(7001, file='./dats/out01.dat',Access = 'append',Status='old')     
               write(7001,31)time,&
               slip1(nele1/2-outpos1,nele3/2),velo1(nele1/2-outpos1,nele3/2),real(tau1(nele1/2-outpos1,nele3/2,itime))/E6,&
               slip3(nele1/2-outpos1,nele3/2),velo3(nele1/2-outpos1,nele3/2),real(tau3(nele1/2-outpos1,nele3/2,itime))/E6,&
               slip2(nele1/2-outpos1,nele3/2),velo2(nele1/2-outpos1,nele3/2),real(tau2(nele1/2-outpos1,nele3/2,itime))/E6
               close(7001)
               OPEN(7002, file='./dats/out02.dat',Access = 'append',Status='old')  
               write(7002,31)time,&
               slip1(nele1/2-outpos1,nele3/2+outpos2),velo1(nele1/2-outpos1,nele3/2+outpos2),real(tau1(nele1/2-outpos1,nele3/2+outpos2,itime))/E6,&
               slip3(nele1/2-outpos1,nele3/2+outpos2),velo3(nele1/2-outpos1,nele3/2+outpos2),real(tau3(nele1/2-outpos1,nele3/2+outpos2,itime))/E6,&
               slip2(nele1/2-outpos1,nele3/2+outpos2),velo2(nele1/2-outpos1,nele3/2+outpos2),real(tau2(nele1/2-outpos1,nele3/2+outpos2,itime))/E6
               close(7002)
               OPEN(7003, file='./dats/out03.dat',Access = 'append',Status='old')     
               write(7003,31)time,&
               slip1(nele1/2-outpos2,nele3/2),velo1(nele1/2-outpos2,nele3/2),real(tau1(nele1/2-outpos2,nele3/2,itime))/E6,&
               slip3(nele1/2-outpos2,nele3/2),velo3(nele1/2-outpos2,nele3/2),real(tau3(nele1/2-outpos2,nele3/2,itime))/E6,&
               slip2(nele1/2-outpos2,nele3/2),velo2(nele1/2-outpos2,nele3/2),real(tau2(nele1/2-outpos2,nele3/2,itime))/E6
               close(7003)             
               OPEN(7004, file='./dats/out04.dat',Access = 'append',Status='old')  
               write(7004,31)time,&
               slip1(nele1/2-outpos2,nele3/2+outpos2),velo1(nele1/2-outpos2,nele3/2+outpos2),real(tau1(nele1/2-outpos2,nele3/2+outpos2,itime))/E6,&
               slip3(nele1/2-outpos2,nele3/2+outpos2),velo3(nele1/2-outpos2,nele3/2+outpos2),real(tau3(nele1/2-outpos2,nele3/2+outpos2,itime))/E6,&
               slip2(nele1/2-outpos2,nele3/2+outpos2),velo2(nele1/2-outpos2,nele3/2+outpos2),real(tau2(nele1/2-outpos2,nele3/2+outpos2,itime))/E6
               close(7004)
               OPEN(7005, file='./dats/out05.dat',Access = 'append',Status='old')     
               write(7005,31)time,&
               slip1(nele1/2-outpos3,nele3/2),velo1(nele1/2-outpos3,nele3/2),real(tau1(nele1/2-outpos3,nele3/2,itime))/E6,&
               slip3(nele1/2-outpos3,nele3/2),velo3(nele1/2-outpos3,nele3/2),real(tau3(nele1/2-outpos3,nele3/2,itime))/E6,&
               slip2(nele1/2-outpos3,nele3/2),velo2(nele1/2-outpos3,nele3/2),real(tau2(nele1/2-outpos3,nele3/2,itime))/E6
               close(7005)             
               OPEN(7006, file='./dats/out06.dat',Access = 'append',Status='old')  
               write(7006,31)time,&
               slip1(nele1/2-outpos3,nele3/2+outpos2),velo1(nele1/2-outpos3,nele3/2+outpos2),real(tau1(nele1/2-outpos3,nele3/2+outpos2,itime))/E6,&
               slip3(nele1/2-outpos3,nele3/2+outpos2),velo3(nele1/2-outpos3,nele3/2+outpos2),real(tau3(nele1/2-outpos3,nele3/2+outpos2,itime))/E6,&
               slip2(nele1/2-outpos3,nele3/2+outpos2),velo2(nele1/2-outpos3,nele3/2+outpos2),real(tau2(nele1/2-outpos3,nele3/2+outpos2,itime))/E6
               close(7006)
               OPEN(7007, file='./dats/out07.dat',Access = 'append',Status='old')     
               write(7007,31)time,&
               slip1(nele1/2,nele3/2),velo1(nele1/2,nele3/2),real(tau1(nele1/2,nele3/2,itime))/E6,&
               slip3(nele1/2,nele3/2),velo3(nele1/2,nele3/2),real(tau3(nele1/2,nele3/2,itime))/E6,&
               slip2(nele1/2,nele3/2),velo2(nele1/2,nele3/2),real(tau2(nele1/2,nele3/2,itime))/E6
               close(7007)             
               OPEN(7008, file='./dats/out08.dat',Access = 'append',Status='old')  
               write(7008,31)time,&
               slip1(nele1/2,nele3/2+outpos2),velo1(nele1/2,nele3/2+outpos2),real(tau1(nele1/2,nele3/2+outpos2,itime))/E6,&
               slip3(nele1/2,nele3/2+outpos2),velo3(nele1/2,nele3/2+outpos2),real(tau3(nele1/2,nele3/2+outpos2,itime))/E6,&
               slip2(nele1/2,nele3/2+outpos2),velo2(nele1/2,nele3/2+outpos2),real(tau2(nele1/2,nele3/2+outpos2,itime))/E6
               close(7008)
               OPEN(7009, file='./dats/out09.dat',Access = 'append',Status='old')  
               write(7009,31)time,&
               slip1(nele1/2,nele3/2+outpos2-outpos3),velo1(nele1/2,nele3/2+outpos2-outpos3),real(tau1(nele1/2,nele3/2+outpos2-outpos3,itime))/E6,&
               slip3(nele1/2,nele3/2+outpos2-outpos3),velo3(nele1/2,nele3/2+outpos2-outpos3),real(tau3(nele1/2,nele3/2+outpos2-outpos3,itime))/E6,&
               slip2(nele1/2,nele3/2+outpos2-outpos3),velo2(nele1/2,nele3/2+outpos2-outpos3),real(tau2(nele1/2,nele3/2+outpos2-outpos3,itime))/E6
               close(7009)
               OPEN(7010, file='./dats/out10.dat',Access = 'append',Status='old')  
               write(7010,31)time,&
               slip1(nele1/2,nele3/2+outpos2+outpos3),velo1(nele1/2,nele3/2+outpos2+outpos3),real(tau1(nele1/2,nele3/2+outpos2+outpos3,itime))/E6,&
               slip3(nele1/2,nele3/2+outpos2+outpos3),velo3(nele1/2,nele3/2+outpos2+outpos3),real(tau3(nele1/2,nele3/2+outpos2+outpos3,itime))/E6,&
               slip2(nele1/2,nele3/2+outpos2+outpos3),velo2(nele1/2,nele3/2+outpos2+outpos3),real(tau2(nele1/2,nele3/2+outpos2+outpos3,itime))/E6
               close(7010)       
               OPEN(7011, file='./dats/out11.dat',Access = 'append',Status='old')  
               write(7011,31)time,&
               slip1(nele1/2+outpos3,nele3/2),velo1(nele1/2+outpos3,nele3/2),real(tau1(nele1/2+outpos3,nele3/2,itime))/E6,&
               slip3(nele1/2+outpos3,nele3/2),velo3(nele1/2+outpos3,nele3/2),real(tau3(nele1/2+outpos3,nele3/2,itime))/E6,&
               slip2(nele1/2+outpos3,nele3/2),velo2(nele1/2+outpos3,nele3/2),real(tau2(nele1/2+outpos3,nele3/2,itime))/E6
               close(7011)       
               OPEN(7012, file='./dats/out12.dat',Access = 'append',Status='old')  
               write(7012,31)time,&
               slip1(nele1/2+outpos3,nele3/2+outpos2),velo1(nele1/2+outpos3,nele3/2+outpos2),real(tau1(nele1/2+outpos3,nele3/2+outpos2,itime))/E6,&
               slip3(nele1/2+outpos3,nele3/2+outpos2),velo3(nele1/2+outpos3,nele3/2+outpos2),real(tau3(nele1/2+outpos3,nele3/2+outpos2,itime))/E6,&
               slip2(nele1/2+outpos3,nele3/2+outpos2),velo2(nele1/2+outpos3,nele3/2+outpos2),real(tau2(nele1/2+outpos3,nele3/2+outpos2,itime))/E6
               close(7012)       
               OPEN(7013, file='./dats/out13.dat',Access = 'append',Status='old')  
               write(7013,31)time,&
               slip1(nele1/2+outpos2,nele3/2),velo1(nele1/2+outpos2,nele3/2),real(tau1(nele1/2+outpos2,nele3/2,itime))/E6,&
               slip3(nele1/2+outpos2,nele3/2),velo3(nele1/2+outpos2,nele3/2),real(tau3(nele1/2+outpos2,nele3/2,itime))/E6,&
               slip2(nele1/2+outpos2,nele3/2),velo2(nele1/2+outpos2,nele3/2),real(tau2(nele1/2+outpos2,nele3/2,itime))/E6
               close(7013)       
               OPEN(7014, file='./dats/out14.dat',Access = 'append',Status='old')  
               write(7014,31)time,&
               slip1(nele1/2+outpos2,nele3/2+outpos2),velo1(nele1/2+outpos2,nele3/2+outpos2),real(tau1(nele1/2+outpos2,nele3/2+outpos2,itime))/E6,&
               slip3(nele1/2+outpos2,nele3/2+outpos2),velo3(nele1/2+outpos2,nele3/2+outpos2),real(tau3(nele1/2+outpos2,nele3/2+outpos2,itime))/E6,&
               slip2(nele1/2+outpos2,nele3/2+outpos2),velo2(nele1/2+outpos2,nele3/2+outpos2),real(tau2(nele1/2+outpos2,nele3/2+outpos2,itime))/E6
               close(7014)       
               OPEN(7015, file='./dats/out15.dat',Access = 'append',Status='old')  
               write(7015,31)time,&
               slip1(nele1/2+outpos1,nele3/2),velo1(nele1/2+outpos1,nele3/2),real(tau1(nele1/2+outpos1,nele3/2,itime))/E6,&
               slip3(nele1/2+outpos1,nele3/2),velo3(nele1/2+outpos1,nele3/2),real(tau3(nele1/2+outpos1,nele3/2,itime))/E6,&
               slip2(nele1/2+outpos1,nele3/2),velo2(nele1/2+outpos1,nele3/2),real(tau2(nele1/2+outpos1,nele3/2,itime))/E6
               close(7015)       
               OPEN(7016, file='./dats/out16.dat',Access = 'append',Status='old')  
               write(7016,31)time,&
               slip1(nele1/2+outpos1,nele3/2+outpos2),velo1(nele1/2+outpos1,nele3/2+outpos2),real(tau1(nele1/2+outpos1,nele3/2+outpos2,itime))/E6,&
               slip3(nele1/2+outpos1,nele3/2+outpos2),velo3(nele1/2+outpos1,nele3/2+outpos2),real(tau3(nele1/2+outpos1,nele3/2+outpos2,itime))/E6,&
               slip2(nele1/2+outpos1,nele3/2+outpos2),velo2(nele1/2+outpos1,nele3/2+outpos2),real(tau2(nele1/2+outpos1,nele3/2+outpos2,itime))/E6
               close(7016)           
      ELSEIF ((TPV_No .eq. 6) .OR. (TPV_No .eq. 7)) THEN 
                  OPEN(7001, file='./dats/out01.dat',Access = 'append',Status='old')  
                  write(7001,31)time,&
                  slip1(nele1/2-outpos1,nele3/2+outpos2),velo1(nele1/2-outpos1,nele3/2+outpos2),real(tau1(nele1/2-outpos1,nele3/2+outpos2,itime))/E6,&
                  slip3(nele1/2-outpos1,nele3/2+outpos2),velo3(nele1/2-outpos1,nele3/2+outpos2),real(tau3(nele1/2-outpos1,nele3/2+outpos2,itime))/E6,&
                  slip2(nele1/2-outpos1,nele3/2+outpos2),velo2(nele1/2-outpos1,nele3/2+outpos2),real(tau2(nele1/2-outpos1,nele3/2+outpos2,itime))/E6
                  close(7001)
                  OPEN(7002, file='./dats/out02.dat',Access = 'append',Status='old')     
                  write(7002,31)time,&
                  slip1(nele1/2-outpos1,nele3/2),velo1(nele1/2-outpos1,nele3/2),real(tau1(nele1/2-outpos1,nele3/2,itime))/E6,&
                  slip3(nele1/2-outpos1,nele3/2),velo3(nele1/2-outpos1,nele3/2),real(tau3(nele1/2-outpos1,nele3/2,itime))/E6,&
                  slip2(nele1/2-outpos1,nele3/2),velo2(nele1/2-outpos1,nele3/2),real(tau2(nele1/2-outpos1,nele3/2,itime))/E6
                  close(7002)
                  OPEN(7003, file='./dats/out03.dat',Access = 'append',Status='old')      
                  write(7003,31)time,&
                  slip1(nele1/2,nele3/2),velo1(nele1/2,nele3/2),real(tau1(nele1/2,nele3/2,itime))/E6,&
                  slip3(nele1/2,nele3/2),velo3(nele1/2,nele3/2),real(tau3(nele1/2,nele3/2,itime))/E6,&
                  slip2(nele1/2,nele3/2),velo2(nele1/2,nele3/2),real(tau2(nele1/2,nele3/2,itime))/E6
                  close(7003)
                  OPEN(7004, file='./dats/out04.dat',Access = 'append',Status='old')  
                  write(7004,31)time,&
                  slip1(nele1/2+outpos1,nele3/2),velo1(nele1/2+outpos1,nele3/2),real(tau1(nele1/2+outpos1,nele3/2,itime))/E6,&
                  slip3(nele1/2+outpos1,nele3/2),velo3(nele1/2+outpos1,nele3/2),real(tau3(nele1/2+outpos1,nele3/2,itime))/E6,&
                  slip2(nele1/2+outpos1,nele3/2),velo2(nele1/2+outpos1,nele3/2),real(tau2(nele1/2+outpos1,nele3/2,itime))/E6
                  close(7004)   
                  OPEN(7005, file='./dats/out05.dat',Access = 'append',Status='old')         
                  write(7005,31)time,&
                  slip1(nele1/2+outpos1,nele3/2+outpos2),velo1(nele1/2+outpos1,nele3/2+outpos2),real(tau1(nele1/2+outpos1,nele3/2+outpos2,itime))/E6,&
                  slip3(nele1/2+outpos1,nele3/2+outpos2),velo3(nele1/2+outpos1,nele3/2+outpos2),real(tau3(nele1/2+outpos1,nele3/2+outpos2,itime))/E6,&
                  slip2(nele1/2+outpos1,nele3/2+outpos2),velo2(nele1/2+outpos1,nele3/2+outpos2),real(tau2(nele1/2+outpos1,nele3/2+outpos2,itime))/E6
               close(7005) 
         ELSE
                  WRITE(6,*) 'Input Error'
                  STOP
      ENDIF                 

31  format(10(10x,e14.6))
    endif      


             
      ! Step 14: Writing the results to file
      WRITE(filename,'(a,i4.4,a)') "SlipFrontOutNew",(itime),".txt"    
      DO i=1,nele3
         open(unit=1,file=filename,Access = 'append',Status='old')
            write(1,33) CFW(i,1),CFW(i,2)
         close(1)    
      enddo


   enddo   ! end of time loop
   write(*,*)"Done"
   WRITE(*,*) '####### TEST RUN OK ########'
   ! GET THE END TIME
   CALL CPU_TIME(END_TIME)
   ! CALCULATE THE ELAPSED TIME
   ELAPSED_TIME = END_TIME - START_TIME
   ! OUTPUT THE ELAPSED TIME
   WRITE(*,*) "ELAPSED TIME:", ELAPSED_TIME, "SECONDS"
END PROGRAM CF_main